function prototype:

void qsort (void* base, size_t num, size_t size, int (*comparator)(const void*,const void*)); 

for example:
struct Student 
{ 
	int age, marks; 
	char name[20]; 
};


int comparator(const void *p, const void *q) 
{ 
	int l = ((struct Student *)p)->marks; 
	int r = ((struct Student *)q)->marks; 
	return (l - r); 
} 


/* little bit about structure*/
/*why this one doesn't work?*/
/*why this one doesn't work?*/
/*why this one doesn't work?*/

#include<stdio.h>
#include<stdlib.h>

typedef struct stud{
        int marks;
        char name[10];
    }s;
    
    
int main(){
    s stud[10];
    s *p; p=stud;
    for(int i=0;i<10;i++){
        *(p+i).marks=i+50;
        printf("%d ",*(p+i).marks);
    }
    
    
    return 0;
}

main.c: In function ‘main’:
main.c:14:15: error: request for member ‘marks’ in something not a structure or union
         *(p+i).marks=i+50;
               ^
main.c:15:28: error: request for member ‘marks’ in something not a structure or union
         printf("%d ",*(p+i).marks);
                            ^
/*this one works*/
#include<stdio.h>
#include<stdlib.h>

typedef struct stud{
        int marks;
        char name[10];
    }s;
    
    
int main(){
    s stud[10];
    s *p; p=stud;
    for(int i=0;i<10;i++){
        p[i].marks=i+50;
        printf("%d ",p[i].marks);
    }
    
    
    return 0;
}
                            
/* this one works as well*/
#include<stdio.h>
#include<stdlib.h>

typedef struct stud{
        int marks;
        char name[10];
    }s;
    
    
int main(){
    s stud[10];
    s *p; p=stud;
    for(int i=0;i<10;i++){
        (p+i)->marks=i+50;
        printf("%d ",(p+i)->marks);
    }
    
    
    return 0;
}
                            
/*back to qsort*/

int comparator(const void* p1, const void* p2);
Return value meaning
<0 The element pointed by p1 goes before the element pointed by p2
0  The element pointed by p1 is equivalent to the element pointed by p2
>0 The element pointed by p1 goes after the element pointed by p2

Source: http://www.cplusplus.com/reference/cstdlib/qsort/





int comparator(const void *p, const void *q) 
{ 
	int l = ((struct Student *)p)->marks; 
	int r = ((struct Student *)q)->marks; 
	return (l - r); 
} 

/*example*/

#include <stdio.h> 
#include <stdlib.h> 

// This function is used in qsort to decide the relative order 
// of elements at addresses p and q. 
int comparator(const void *p, const void *q) 
{ 
	// Get the values at given addresses 
	int l = *(const int *)p; 
	int r = *(const int *)q; 

	// both odd, put the greater of two first. 
	if ((l&1) && (r&1)) 
		return (r-l); 

	// both even, put the smaller of two first 
	if ( !(l&1) && !(r&1) ) 
		return (l-r); 

	// l is even, put r first 
	if (!(l&1)) 
		return 1; 

	// l is odd, put l first 
	return -1; 
} 

// A utility function to print an array 
void printArr(int arr[], int n) 
{ 
	int i; 
	for (i = 0; i < n; ++i) 
		printf("%d ", arr[i]); 
} 

// Driver program to test above function 
int main() 
{ 
	int arr[] = {1, 6, 5, 2, 3, 9, 4, 7, 8}; 

	int size = sizeof(arr) / sizeof(arr[0]); 
	qsort((void*)arr, size, sizeof(arr[0]), comparator); 

	printf("Output array is\n"); 
	printArr(arr, size); 

	return 0; 
} 
